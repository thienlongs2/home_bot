#property copyright "Your Name"
#property link      "https://yourwebsite.com"
#property version   "1.00"

input double RiskPercent = 0.05; // Risk per trade (%)
input double TP = 120;           // Take Profit (pips)
input double SL = 70;            // Stop Loss (pips)
input double Vol = 0.01;         // Volume (lots)
input int MagicNumber = 12345;   // Magic Number
input double MaxPriceDeviation = 10; // Độ lệch tối đa so với giá API (pips)

#include <Trade\Trade.mqh>
CTrade trade;

string url = "http://localhost:8000/get_signal";
string last_signal = ""; // Lưu tín hiệu cuối cùng để tránh lặp lệnh

// Hàm khởi tạo EA
int OnInit() {
   trade.SetExpertMagicNumber(MagicNumber);
   // Không cần kiểm tra WebRequest trong OnInit, chỉ cần cấu hình trong MT5
   return(INIT_SUCCEEDED);
}

// Hàm xử lý mỗi tick
void OnTick() {
   string response = GetSignalFromServer();
   if (response != "" && response != "{}") { // Đảm bảo có tín hiệu hợp lệ
      ProcessSignal(response);
   }
}

// Nhận tín hiệu từ server
string GetSignalFromServer() {
   char data[];        // Dữ liệu gửi đi (trống vì dùng GET)
   char result[];      // Mảng lưu kết quả trả về
   string headers = "Content-Type: application/json";
   
   int res = WebRequest("GET", url, NULL, NULL, 5000, data, 0, result, headers);
   
   if (res == 200) {
      string response = CharArrayToString(result);
      // Print("Nhận tín hiệu: ", response); // Uncomment để debug
      return response;
   } else {
      Print("Lỗi nhận tín hiệu: ", res);
      return "";
   }
}

// Xử lý tín hiệu từ API
void ProcessSignal(string signal_json) {
   // Lấy thông tin từ JSON
   string signal = ExtractJsonValue(signal_json, "\"signal\":\"", "\"");
   int magic_number = (int)StringToInteger(ExtractJsonValue(signal_json, "\"magic_number\":", ","));
   double api_price = StringToDouble(ExtractJsonValue(signal_json, "\"current_price\":", ","));

   // Kiểm tra magic_number khớp
   if (magic_number != MagicNumber) {
      return; // Bỏ qua nếu Magic Number không khớp
   }

   // Kiểm tra giá hiện tại so với giá từ API
   double current_bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double current_ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double price_deviation = MathAbs(current_bid - api_price) * 10000; // Chuyển sang pips

   if (price_deviation > MaxPriceDeviation) {
      Print("Giá lệch quá ", MaxPriceDeviation, " pips (API: ", api_price, ", Hiện tại: ", current_bid, "). Bỏ qua lệnh.");
      return;
   }

   // Kiểm tra tín hiệu mới để tránh lặp
   if (signal == last_signal) {
      return; // Bỏ qua nếu tín hiệu không thay đổi
   }

   // Xử lý tín hiệu
   if (signal == "buy") {
      OpenBuy(current_ask);
      last_signal = signal;
   } else if (signal == "sell") {
      OpenSell(current_bid);
      last_signal = signal;
   } else if (signal == "close") {
      CloseAll();
      last_signal = signal;
   }
}

// Trích xuất giá trị từ JSON thủ công
string ExtractJsonValue(string json, string key, string end_char) {
   int start_pos = StringFind(json, key) + StringLen(key);
   int end_pos = StringFind(json, end_char, start_pos);
   if (start_pos >= 0 && end_pos > start_pos) {
      return StringSubstr(json, start_pos, end_pos - start_pos);
   }
   return "";
}

// Mở lệnh Buy
void OpenBuy(double ask) {
   double sl = ask - SL * _Point * 10;
   double tp = ask + TP * _Point * 10;
   if (!trade.Buy(Vol, _Symbol, ask, sl, tp)) {
      Print("Lỗi mở lệnh Buy: ", GetLastError());
   } else {
      Print("Đã mở lệnh Buy tại: ", ask);
   }
}

// Mở lệnh Sell
void OpenSell(double bid) {
   double sl = bid + SL * _Point * 10;
   double tp = bid - TP * _Point * 10;
   if (!trade.Sell(Vol, _Symbol, bid, sl, tp)) {
      Print("Lỗi mở lệnh Sell: ", GetLastError());
   } else {
      Print("Đã mở lệnh Sell tại: ", bid);
   }
}

// Đóng tất cả lệnh
void CloseAll() {
   for (int i = PositionsTotal() - 1; i >= 0; i--) {
      if (PositionSelectByTicket(PositionGetTicket(i))) {
         if (PositionGetInteger(POSITION_MAGIC) == MagicNumber) {
            trade.PositionClose(PositionGetTicket(i));
            Print("Đã đóng lệnh: ", PositionGetTicket(i));
         }
      }
   }
}

// Hàm dọn dẹp
void OnDeinit(const int reason) {
   Print("EA đã dừng, lý do: ", reason);
}